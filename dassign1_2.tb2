//--------------------------------------------------------------------
//		Timescale
//		Means that if you do #1 in the initial block of your
//		testbench, time is advanced by 1ns instead of 1ps
//--------------------------------------------------------------------
`timescale 1ns / 1ps

//--------------------------------------------------------------------
//		Design Assign #1, Problem #1 Testbench.
//--------------------------------------------------------------------
module dassign1_2_tb();
//-------------------------------------------------
//		Signal Declarations
//----------------------------------------------------------------

wire [4:0] out;
reg [7:0] a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;
wire [2:0]  y1;
reg  [2:0]  z1;

reg  [3:0]  in1, in2, in3, in4, in5;
wire [6:0]  y2;
reg  [6:0]  z2;

integer     it, jt;
integer     fa5_err, adder5_err;

//----------------------------------------------------------------
//		Instantiate modules Module
//----------------------------------------------------------------
maxindex mi(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,out);

//----------------------------------------------------------------
//		Test Stimulus
//----------------------------------------------------------------
initial begin
    fa5_err=0;
    adder5_err=0;

    $dumpfile("dassign1_1_timing.vcd");
    $dumpvars;

    //for(it=8'b0; it<127; it=it+1) begin
    	//for(jt=8'b0; jt<127 ;jt=jt+1) begin
        a=8'b1; b=8'b10;  
        c=8'b11;
        d=8'b111;
        e=8'b1111;
        f=8'b11;
        g=8'b0;
        h=8'b0;
        i=8'b0;
        j=8'b0;
        k=8'b0;
        l=8'b0;
        m=8'b0;
        n=8'b0;
        o=8'b0;
        p=8'b0;
        q=8'b0;
        r=8'b0;
        s=8'b0;
        t=8'b0;
        u=8'b0;
        v=8'b0;
        w=8'b0;
        x=8'b0;
        y=8'b0;
        z=8'b0;
        /*in1 = $urandom;
        in2 = $urandom;
        in3 = $urandom;
        in4 = $urandom;
        in5 = $urandom;*/

        //z are correct outputs
        #2
        z1 = a+b+c+d+e+f+g;
        z2 = in1 + in2 + in3 + in4 + in5;

        #40
        /*if(y1 !== z1)*/
        
        begin
            $display ("a=%b b=%b out=%b",
                a,b,out);  
            fa5_err=fa5_err+1;
        //end
       //end
        
        
        /*if(y2 !== z2) begin
            $display ("in1=%b in2=%b in3=%b in4=%b in5=%b in6=&b in7= %b in8=%b func=%b correct=%b i=%b",
                in1, in2, in3, in4, in5, y2, z2, i);
            adder5_err=adder5_err+1;
        end*/
      end

    if(!fa5_err)
        $display("ASSERTION PASSED CHECK fa5");
    else
        $display("ASSERTION FAILED CHECK fa5 WITH ERRNO %d\n",fa5_err);

    if(!adder5_err)
        $display("ASSERTION PASSED CHECK adder5");
    else
        $display("ASSERTION FAILED CHECK adder5 WITH ERRNO %d\n",adder5_err);
end
endmodule